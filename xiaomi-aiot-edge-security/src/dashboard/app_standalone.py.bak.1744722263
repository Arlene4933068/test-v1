#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
独立运行的Dashboard应用
"""

import os
import sys
import logging
import traceback
from flask import Flask, render_template, request
from datetime import datetime

# 配置详细的日志记录
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)
logger.info("应用启动中...")

# 定义模板和静态资源目录
templates_dir = os.path.join(os.path.dirname(__file__), 'templates')
static_dir = os.path.join(os.path.dirname(__file__), 'static')

# 确保目录存在
os.makedirs(templates_dir, exist_ok=True)
os.makedirs(static_dir, exist_ok=True)
os.makedirs(os.path.join(static_dir, 'css'), exist_ok=True)
os.makedirs(os.path.join(static_dir, 'js'), exist_ok=True)

# 创建应用
app = Flask(__name__, 
           template_folder=templates_dir,
           static_folder=static_dir)
app.config['DEBUG'] = True

# 简单的首页路由
@app.route('/')
def index():
    try:
        logger.info("访问首页")
        # 尝试返回一个非常简单的HTML，避免任何可能的模板错误
        return """
        <!DOCTYPE html>
        <html>
        <head>
            <title>小米AIoT边缘安全防护研究平台</title>
            <style>
                body { font-family: Arial, sans-serif; padding: 20px; }
                h1 { color: #ff6700; }
            </style>
        </head>
        <body>
            <h1>小米AIoT边缘安全防护研究平台</h1>
            <p>系统已成功启动!</p>
            <a href="/debug">查看系统诊断</a>
        </body>
        </html>
        """
    except Exception as e:
        logger.error(f"首页渲染错误: {str(e)}")
        logger.error(traceback.format_exc())
        return "系统错误，请查看日志", 500

# 调试路由
@app.route('/debug')
def debug():
    logger.info("访问调试页面")
    try:
        # 收集系统信息
        import platform
        
        modules = []
        for name, module in sys.modules.items():
            if hasattr(module, '__version__'):
                try:
                    version = module.__version__
                    modules.append(f"{name}: {version}")
                except:
                    modules.append(f"{name}: 版本未知")
        
        # 收集目录信息
        template_files = []
        if os.path.exists(templates_dir):
            template_files = os.listdir(templates_dir)
            
        static_files = []
        if os.path.exists(static_dir):
            static_files = os.listdir(static_dir)
            
        # 返回诊断信息
        return f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>系统诊断 - 小米AIoT平台</title>
            <style>
                body {{ font-family: Arial, sans-serif; padding: 20px; }}
                h1 {{ color: #ff6700; }}
                h2 {{ color: #333; margin-top: 20px; }}
                pre {{ background: #f5f5f5; padding: 10px; border-radius: 5px; overflow-x: auto; }}
                .section {{ margin-bottom: 30px; }}
            </style>
        </head>
        <body>
            <h1>系统诊断</h1>
            
            <div class="section">
                <h2>系统信息</h2>
                <pre>Python: {sys.version}
平台: {platform.platform()}
工作目录: {os.getcwd()}</pre>
            </div>
            
            <div class="section">
                <h2>目录结构</h2>
                <h3>模板目录: {templates_dir}</h3>
                <pre>{", ".join(template_files) if template_files else "空目录"}</pre>
                
                <h3>静态文件目录: {static_dir}</h3>
                <pre>{", ".join(static_files) if static_files else "空目录"}</pre>
            </div>
            
            <div class="section">
                <h2>已加载模块 (部分)</h2>
                <pre>{chr(10).join(sorted(modules)[:20])}</pre>
            </div>
            
            <a href="/">返回首页</a>
        </body>
        </html>
        """
    except Exception as e:
        logger.error(f"调试页面错误: {str(e)}")
        logger.error(traceback.format_exc())
        return f"调试数据生成错误: {str(e)}", 500

# 错误处理路由
@app.errorhandler(404)
def page_not_found(e):
    logger.warning(f"404错误: {request.path}")
    return "找不到页面: " + request.path, 404

@app.errorhandler(500)
def internal_error(error):
    logger.error(f"500错误: {str(error)}")
    logger.error(traceback.format_exc())
    
    try:
        # 尝试使用简单字符串而非模板
        return """
        <!DOCTYPE html>
        <html>
        <head>
            <title>服务器错误</title>
            <style>
                body { font-family: Arial, sans-serif; padding: 20px; }
                h1 { color: red; }
                pre { background: #f5f5f5; padding: 10px; border-radius: 5px; }
            </style>
        </head>
        <body>
            <h1>500 - 服务器错误</h1>
            <p>服务器遇到内部错误，无法完成请求。</p>
            <p>请联系管理员并提供以下信息:</p>
            <pre>"""+ str(error) +"""</pre>
            <a href="/">返回首页</a>
        </body>
        </html>
        """, 500
    except Exception as e:
        logger.error(f"错误页面渲染失败: {str(e)}")
        return "严重错误: " + str(error), 500

if __name__ == "__main__":
    try:
        # 显示启动信息
        print(f"\n{'='*60}")
        print(f"{'小米AIoT边缘安全防护研究平台':^60}")
        print(f"{'='*60}")
        print(f"• Python版本: {sys.version.split()[0]}")
        print(f"• 当前工作目录: {os.getcwd()}")
        print(f"• 模板目录: {templates_dir}")
        print(f"• 静态目录: {static_dir}")
        print(f"\n启动Web服务器...")
        
        # 启动服务器，禁用重新加载以避免潜在问题
        app.run(host='0.0.0.0', port=5000, debug=True, use_reloader=False)
    except Exception as e:
        print(f"启动失败: {str(e)}")
        traceback.print_exc()