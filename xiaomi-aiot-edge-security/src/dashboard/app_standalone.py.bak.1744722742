#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
独立运行的Dashboard应用 - 经过500错误修复
"""

import os
import sys
import logging
import traceback
from flask import Flask, render_template, request, redirect, url_for
from datetime import datetime

# 禁用Matplotlib的交互模式，避免在无GUI环境中出错
try:
    import matplotlib
    matplotlib.use('Agg')
except ImportError:
    pass

# 配置详细日志
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('app.log')
    ]
)

logger = logging.getLogger("dashboard")
logger.info("应用启动中...")

# 确保目录路径
base_dir = os.path.dirname(os.path.abspath(__file__))
templates_dir = os.path.join(base_dir, 'templates')
static_dir = os.path.join(base_dir, 'static')

# 创建必要的目录
os.makedirs(templates_dir, exist_ok=True)
os.makedirs(static_dir, exist_ok=True)
os.makedirs(os.path.join(static_dir, 'css'), exist_ok=True)
os.makedirs(os.path.join(static_dir, 'js'), exist_ok=True)

# 创建Flask应用
app = Flask(__name__, 
           template_folder=templates_dir,
           static_folder=static_dir)
app.config['DEBUG'] = True
app.config['PROPAGATE_EXCEPTIONS'] = True  # 确保错误被传递到日志

# 创建一个简单的500错误模板
error_template_path = os.path.join(templates_dir, '500.html')
if not os.path.exists(error_template_path):
    with open(error_template_path, 'w', encoding='utf-8') as f:
        f.write("""<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>服务器错误 - 小米AIoT边缘安全防护研究平台</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }
        .container { max-width: 800px; margin: 40px auto; padding: 20px; background-color: #fff; border-radius: 5px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #e53e3e; margin-top: 0; }
        pre { background: #f5f5f5; padding: 15px; border-radius: 5px; overflow-x: auto; }
        .footer { margin-top: 30px; font-size: 0.9em; color: #666; }
    </style>
</head>
<body>
    <div class="container">
        <h1>500 - 服务器内部错误</h1>
        <p>抱歉，服务器遇到了内部错误，无法完成您的请求。</p>
        <h3>错误信息:</h3>
        <pre>{{ error }}</pre>
        
        <div class="footer">
            <p>时间: {{ current_time }}</p>
            <p>用户: {{ current_user }}</p>
            <p><a href="/">返回首页</a></p>
        </div>
    </div>
</body>
</html>""")
    logger.info(f"创建了500错误模板: {error_template_path}")

# 404页面模板
not_found_template_path = os.path.join(templates_dir, '404.html')
if not os.path.exists(not_found_template_path):
    with open(not_found_template_path, 'w', encoding='utf-8') as f:
        f.write("""<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>页面不存在 - 小米AIoT边缘安全防护研究平台</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }
        .container { max-width: 800px; margin: 40px auto; padding: 20px; background-color: #fff; border-radius: 5px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #3182ce; margin-top: 0; }
        .footer { margin-top: 30px; font-size: 0.9em; color: #666; }
    </style>
</head>
<body>
    <div class="container">
        <h1>404 - 页面不存在</h1>
        <p>抱歉，您请求的页面不存在。</p>
        <p>路径: {{ path }}</p>
        
        <div class="footer">
            <p>时间: {{ current_time }}</p>
            <p><a href="/">返回首页</a></p>
        </div>
    </div>
</body>
</html>""")
    logger.info(f"创建了404错误模板: {not_found_template_path}")

# 创建简单的主页模板
index_template_path = os.path.join(templates_dir, 'index.html')
if not os.path.exists(index_template_path):
    with open(index_template_path, 'w', encoding='utf-8') as f:
        f.write("""<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>小米AIoT边缘安全防护研究平台</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }
        .container { max-width: 800px; margin: 40px auto; padding: 20px; background-color: #fff; border-radius: 5px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #ff6700; margin-top: 0; }
        .footer { margin-top: 30px; font-size: 0.9em; color: #666; }
        .btn { display: inline-block; padding: 10px 20px; background-color: #ff6700; color: white; text-decoration: none; border-radius: 4px; margin-top: 20px; }
        .btn:hover { background-color: #ff8533; }
    </style>
</head>
<body>
    <div class="container">
        <h1>小米AIoT边缘安全防护研究平台</h1>
        <p>欢迎使用小米AIoT边缘安全防护研究平台。</p>
        <p>当前状态: 系统运行正常</p>
        <p>当前时间: {{ current_time }}</p>
        
        <a href="/debug" class="btn">查看系统状态</a>
        
        <div class="footer">
            <p>© 2025 小米AIoT边缘安全防护研究平台</p>
        </div>
    </div>
</body>
</html>""")
    logger.info(f"创建了主页模板: {index_template_path}")

@app.route('/')
def index():
    """首页"""
    try:
        logger.info("访问首页")
        return render_template('index.html', current_time=datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
    except Exception as e:
        logger.error(f"首页渲染错误: {str(e)}")
        logger.error(traceback.format_exc())
        return """
        <!DOCTYPE html>
        <html>
        <head>
            <title>小米AIoT边缘安全防护研究平台</title>
            <style>
                body { font-family: Arial, sans-serif; padding: 20px; }
                h1 { color: #ff6700; }
            </style>
        </head>
        <body>
            <h1>小米AIoT边缘安全防护研究平台</h1>
            <p>系统运行正常，但模板渲染失败。</p>
            <p>当前时间: """ + datetime.now().strftime("%Y-%m-%d %H:%M:%S") + """</p>
            <a href="/debug">查看系统状态</a>
        </body>
        </html>
        """

@app.route('/debug')
def debug():
    """调试页面"""
    try:
        logger.info("访问调试页面")
        
        # 收集系统信息
        import platform
        
        # 检查依赖模块
        dependencies = {}
        for module_name in ['flask', 'werkzeug', 'jinja2', 'matplotlib', 'pandas']:
            try:
                module = __import__(module_name)
                dependencies[module_name] = getattr(module, '__version__', '未知版本')
            except ImportError:
                dependencies[module_name] = '未安装'
        
        # 检查目录
        dirs = {
            '应用目录': base_dir,
            '模板目录': templates_dir,
            '静态文件目录': static_dir
        }
        
        for name, path in dirs.items():
            dirs[name] = {
                'path': path,
                'exists': os.path.exists(path),
                'files': os.listdir(path) if os.path.exists(path) else []
            }
        
        # 返回HTML
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>系统调试 - 小米AIoT边缘安全防护研究平台</title>
            <style>
                body {{ font-family: Arial, sans-serif; padding: 20px; }}
                h1 {{ color: #ff6700; }}
                h2 {{ color: #333; margin-top: 30px; }}
                pre {{ background: #f5f5f5; padding: 10px; border-radius: 5px; overflow-x: auto; }}
                .section {{ margin-bottom: 30px; }}
                .success {{ color: green; }}
                .error {{ color: red; }}
            </style>
        </head>
        <body>
            <h1>系统调试</h1>
            
            <div class="section">
                <h2>系统信息</h2>
                <pre>Python: {sys.version}
平台: {platform.platform()}
工作目录: {os.getcwd()}</pre>
            </div>
            
            <div class="section">
                <h2>依赖模块</h2>
                <ul>
        """
        
        for name, version in dependencies.items():
            status = "success" if version != "未安装" else "error"
            html += f'<li><span class="{status}">{name}: {version}</span></li>
'
        
        html += """
                </ul>
            </div>
            
            <div class="section">
                <h2>目录信息</h2>
        """
        
        for name, info in dirs.items():
            status = "success" if info['exists'] else "error"
            html += f'<h3>{name} <span class="{status}">{"存在" if info["exists"] else "不存在"}</span></h3>
'
            html += f'<pre>{info["path"]}</pre>
'
            
            if info['exists']:
                if info['files']:
                    html += '<ul>
'
                    for file in sorted(info['files']):
                        html += f'<li>{file}</li>
'
                    html += '</ul>
'
                else:
                    html += '<p>目录为空</p>
'
        
        html += """
            </div>
            
            <p><a href="/">返回首页</a></p>
        </body>
        </html>
        """
        
        return html
    except Exception as e:
        logger.error(f"调试页面错误: {str(e)}")
        logger.error(traceback.format_exc())
        return f"调试页面生成错误: {str(e)}", 500

@app.errorhandler(404)
def page_not_found(e):
    """处理404错误"""
    logger.warning(f"404错误: {request.path}")
    try:
        return render_template('404.html', 
                              path=request.path,
                              current_time=datetime.now().strftime('%Y-%m-%d %H:%M:%S')), 404
    except Exception as template_error:
        logger.error(f"渲染404模板失败: {str(template_error)}")
        return f"404 - 页面未找到: {request.path}", 404

@app.errorhandler(500)
def internal_error(error):
    """处理500错误"""
    logger.error(f'服务器错误: {error}')
    logger.error(traceback.format_exc())
    
    try:
        return render_template('500.html', 
                              current_user='Guest', 
                              current_time=datetime.now().strftime('%Y-%m-%d %H:%M:%S'), 
                              error=str(error)), 500
    except Exception as template_error:
        logger.error(f"渲染错误模板失败: {str(template_error)}")
        return f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>服务器错误</title>
            <style>
                body {{ font-family: Arial, sans-serif; padding: 20px; }}
                h1 {{ color: #e53e3e; }}
                pre {{ background: #f5f5f5; padding: 10px; overflow-x: auto; }}
            </style>
        </head>
        <body>
            <h1>500 - 服务器错误</h1>
            <p>服务器遇到内部错误，无法完成请求。</p>
            <h3>错误信息:</h3>
            <pre>{str(error)}</pre>
            <p>模板渲染也失败: {str(template_error)}</p>
            <p><a href="/">返回首页</a></p>
        </body>
        </html>
        """, 500

if __name__ == "__main__":
    try:
        banner("小米AIoT边缘安全防护研究平台")
        print(f"• 工作目录: {os.getcwd()}")
        print(f"• 应用目录: {base_dir}")
        print(f"• 模板目录: {templates_dir}")
        print(f"• 静态目录: {static_dir}")
        
        print("
启动服务器，访问 http://localhost:5000 查看应用...")
        app.run(host='0.0.0.0', port=5000, debug=True)
    except Exception as e:
        logger.critical(f"启动失败: {str(e)}")
        logger.critical(traceback.format_exc())
        print(f"
严重错误: {str(e)}")
        print("请查看日志获取更多信息。")
